// Automatically generated by MockGen. DO NOT EDIT!
// Source: amqpchannel.go

package connection

import (
	gomock "github.com/golang/mock/gomock"
	amqp "github.com/streadway/amqp"
)

// Mock of AMQPChannel interface
type MockAMQPChannel struct {
	ctrl     *gomock.Controller
	recorder *_MockAMQPChannelRecorder
}

// Recorder for MockAMQPChannel (not exported)
type _MockAMQPChannelRecorder struct {
	mock *MockAMQPChannel
}

func NewMockAMQPChannel(ctrl *gomock.Controller) *MockAMQPChannel {
	mock := &MockAMQPChannel{ctrl: ctrl}
	mock.recorder = &_MockAMQPChannelRecorder{mock}
	return mock
}

func (_m *MockAMQPChannel) EXPECT() *_MockAMQPChannelRecorder {
	return _m.recorder
}

func (_m *MockAMQPChannel) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockAMQPChannel) NotifyClose(c chan *amqp.Error) chan *amqp.Error {
	ret := _m.ctrl.Call(_m, "NotifyClose", c)
	ret0, _ := ret[0].(chan *amqp.Error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) NotifyClose(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyClose", arg0)
}

func (_m *MockAMQPChannel) NotifyFlow(c chan bool) chan bool {
	ret := _m.ctrl.Call(_m, "NotifyFlow", c)
	ret0, _ := ret[0].(chan bool)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) NotifyFlow(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyFlow", arg0)
}

func (_m *MockAMQPChannel) NotifyReturn(c chan amqp.Return) chan amqp.Return {
	ret := _m.ctrl.Call(_m, "NotifyReturn", c)
	ret0, _ := ret[0].(chan amqp.Return)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) NotifyReturn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyReturn", arg0)
}

func (_m *MockAMQPChannel) NotifyCancel(c chan string) chan string {
	ret := _m.ctrl.Call(_m, "NotifyCancel", c)
	ret0, _ := ret[0].(chan string)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) NotifyCancel(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyCancel", arg0)
}

func (_m *MockAMQPChannel) NotifyConfirm(ack chan uint64, nack chan uint64) (chan uint64, chan uint64) {
	ret := _m.ctrl.Call(_m, "NotifyConfirm", ack, nack)
	ret0, _ := ret[0].(chan uint64)
	ret1, _ := ret[1].(chan uint64)
	return ret0, ret1
}

func (_mr *_MockAMQPChannelRecorder) NotifyConfirm(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyConfirm", arg0, arg1)
}

func (_m *MockAMQPChannel) NotifyPublish(confirm chan amqp.Confirmation) chan amqp.Confirmation {
	ret := _m.ctrl.Call(_m, "NotifyPublish", confirm)
	ret0, _ := ret[0].(chan amqp.Confirmation)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) NotifyPublish(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyPublish", arg0)
}

func (_m *MockAMQPChannel) Qos(prefetchCount int, prefetchSize int, global bool) error {
	ret := _m.ctrl.Call(_m, "Qos", prefetchCount, prefetchSize, global)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) Qos(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Qos", arg0, arg1, arg2)
}

func (_m *MockAMQPChannel) Cancel(consumer string, noWait bool) error {
	ret := _m.ctrl.Call(_m, "Cancel", consumer, noWait)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) Cancel(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Cancel", arg0, arg1)
}

func (_m *MockAMQPChannel) QueueDeclare(name string, durable bool, autoDelete bool, exclusive bool, noWait bool, args amqp.Table) (amqp.Queue, error) {
	ret := _m.ctrl.Call(_m, "QueueDeclare", name, durable, autoDelete, exclusive, noWait, args)
	ret0, _ := ret[0].(amqp.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAMQPChannelRecorder) QueueDeclare(name string, durable bool, autoDelete bool, exclusive bool, noWait bool, args amqp.Table) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueueDeclare", name, durable, autoDelete, exclusive, noWait, args)
}

func (_m *MockAMQPChannel) QueueDeclarePassive(name string, durable bool, autoDelete bool, exclusive bool, noWait bool, args amqp.Table) (amqp.Queue, error) {
	ret := _m.ctrl.Call(_m, "QueueDeclarePassive", name, durable, autoDelete, exclusive, noWait, args)
	ret0, _ := ret[0].(amqp.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAMQPChannelRecorder) QueueDeclarePassive(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueueDeclarePassive", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockAMQPChannel) QueueInspect(name string) (amqp.Queue, error) {
	ret := _m.ctrl.Call(_m, "QueueInspect", name)
	ret0, _ := ret[0].(amqp.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAMQPChannelRecorder) QueueInspect(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueueInspect", arg0)
}

func (_m *MockAMQPChannel) QueueBind(name string, key string, exchange string, noWait bool, args amqp.Table) error {
	ret := _m.ctrl.Call(_m, "QueueBind", name, key, exchange, noWait, args)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) QueueBind(name string, key string, exchange string, noWait bool, args amqp.Table) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueueBind", name, key, exchange, noWait, args)
}

func (_m *MockAMQPChannel) QueueUnbind(name string, key string, exchange string, args amqp.Table) error {
	ret := _m.ctrl.Call(_m, "QueueUnbind", name, key, exchange, args)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) QueueUnbind(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueueUnbind", arg0, arg1, arg2, arg3)
}

func (_m *MockAMQPChannel) QueuePurge(name string, noWait bool) (int, error) {
	ret := _m.ctrl.Call(_m, "QueuePurge", name, noWait)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAMQPChannelRecorder) QueuePurge(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueuePurge", arg0, arg1)
}

func (_m *MockAMQPChannel) QueueDelete(name string, ifUnused bool, ifEmpty bool, noWait bool) (int, error) {
	ret := _m.ctrl.Call(_m, "QueueDelete", name, ifUnused, ifEmpty, noWait)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAMQPChannelRecorder) QueueDelete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueueDelete", arg0, arg1, arg2, arg3)
}

func (_m *MockAMQPChannel) Consume(queue string, consumer string, autoAck bool, exclusive bool, noLocal bool, noWait bool, args amqp.Table) (<-chan amqp.Delivery, error) {
	ret := _m.ctrl.Call(_m, "Consume", queue, consumer, autoAck, exclusive, noLocal, noWait, args)
	ret0, _ := ret[0].(<-chan amqp.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAMQPChannelRecorder) Consume(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Consume", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

func (_m *MockAMQPChannel) ExchangeDeclare(name string, kind string, durable bool, autoDelete bool, internal bool, noWait bool, args amqp.Table) error {
	ret := _m.ctrl.Call(_m, "ExchangeDeclare", name, kind, durable, autoDelete, internal, noWait, args)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) ExchangeDeclare(name string, kind string, durable bool, autoDelete bool, internal bool, noWait bool, args amqp.Table) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExchangeDeclare", name, kind, durable, autoDelete, internal, noWait, args)
}

func (_m *MockAMQPChannel) ExchangeDeclarePassive(name string, kind string, durable bool, autoDelete bool, internal bool, noWait bool, args amqp.Table) error {
	ret := _m.ctrl.Call(_m, "ExchangeDeclarePassive", name, kind, durable, autoDelete, internal, noWait, args)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) ExchangeDeclarePassive(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExchangeDeclarePassive", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

func (_m *MockAMQPChannel) ExchangeDelete(name string, ifUnused bool, noWait bool) error {
	ret := _m.ctrl.Call(_m, "ExchangeDelete", name, ifUnused, noWait)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) ExchangeDelete(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExchangeDelete", arg0, arg1, arg2)
}

func (_m *MockAMQPChannel) ExchangeBind(destination string, key string, source string, noWait bool, args amqp.Table) error {
	ret := _m.ctrl.Call(_m, "ExchangeBind", destination, key, source, noWait, args)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) ExchangeBind(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExchangeBind", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockAMQPChannel) ExchangeUnbind(destination string, key string, source string, noWait bool, args amqp.Table) error {
	ret := _m.ctrl.Call(_m, "ExchangeUnbind", destination, key, source, noWait, args)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) ExchangeUnbind(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExchangeUnbind", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockAMQPChannel) Publish(exchange string, key string, mandatory bool, immediate bool, msg amqp.Publishing) error {
	ret := _m.ctrl.Call(_m, "Publish", exchange, key, mandatory, immediate, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) Publish(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Publish", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockAMQPChannel) Get(queue string, autoAck bool) (amqp.Delivery, bool, error) {
	ret := _m.ctrl.Call(_m, "Get", queue, autoAck)
	ret0, _ := ret[0].(amqp.Delivery)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockAMQPChannelRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1)
}

func (_m *MockAMQPChannel) Tx() error {
	ret := _m.ctrl.Call(_m, "Tx")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) Tx() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Tx")
}

func (_m *MockAMQPChannel) TxCommit() error {
	ret := _m.ctrl.Call(_m, "TxCommit")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) TxCommit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TxCommit")
}

func (_m *MockAMQPChannel) TxRollback() error {
	ret := _m.ctrl.Call(_m, "TxRollback")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) TxRollback() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TxRollback")
}

func (_m *MockAMQPChannel) Flow(active bool) error {
	ret := _m.ctrl.Call(_m, "Flow", active)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) Flow(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Flow", arg0)
}

func (_m *MockAMQPChannel) Confirm(noWait bool) error {
	ret := _m.ctrl.Call(_m, "Confirm", noWait)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) Confirm(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Confirm", arg0)
}

func (_m *MockAMQPChannel) Recover(requeue bool) error {
	ret := _m.ctrl.Call(_m, "Recover", requeue)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) Recover(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Recover", arg0)
}

func (_m *MockAMQPChannel) Ack(tag uint64, multiple bool) error {
	ret := _m.ctrl.Call(_m, "Ack", tag, multiple)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) Ack(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Ack", arg0, arg1)
}

func (_m *MockAMQPChannel) Nack(tag uint64, multiple bool, requeue bool) error {
	ret := _m.ctrl.Call(_m, "Nack", tag, multiple, requeue)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) Nack(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Nack", arg0, arg1, arg2)
}

func (_m *MockAMQPChannel) Reject(tag uint64, requeue bool) error {
	ret := _m.ctrl.Call(_m, "Reject", tag, requeue)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAMQPChannelRecorder) Reject(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reject", arg0, arg1)
}
